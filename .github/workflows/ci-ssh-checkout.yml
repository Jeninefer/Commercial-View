name: CI SSH Checkout Test

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ssh-checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH for deploy key
        shell: bash
        run: |
          mkdir -p ~/.ssh
          if [ -z "${{ secrets.DEPLOY_VISUAL_CI_KEY }}" ]; then
            echo "SSH key secret is not set!" >&2
            exit 1
          fi
          umask 177
          echo "${{ secrets.DEPLOY_VISUAL_CI_KEY }}" | install -m 600 /dev/stdin ~/.ssh/id_ed25519
          if [ ! -s ~/.ssh/id_ed25519 ]; then
            echo "Failed to write SSH key!" >&2
            exit 1
          fi
          # chmod 600 ~/.ssh/id_ed25519  # Not needed, install sets permissions
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Test SSH clone
        shell: bash
        run: |
          git clone git@github.com:${{ github.repository }}.git repo
          cd repo
          git fetch --all --tags --prune
          git rev-parse --short HEAD

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.9-${{ hashFiles('repo/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.9-

      - name: Install dependencies
        shell: bash
        run: |
          cd repo
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Import smoke test
        shell: bash
        run: |
          cd repo
          python <<EOF
import re
import sys
import os

req_file = "requirements.txt"
if not os.path.isfile(req_file):
    print("requirements.txt not found, skipping import smoke test.")
    sys.exit(0)

def parse_pkg(line):
    # Remove comments and extras, get the package name
    line = line.split('#', 1)[0].strip()
    if not line or line.startswith('-'):
        return None
    # Remove version specifiers and extras
    m = re.match(r'^([A-Za-z0-9_-]+)([A-Za-z0-9_.-]*)', line)
    return (m.group(1) + (m.group(2) or "")) if m else None

pkgs = []
with open(req_file) as f:
    for line in f:
        pkg = parse_pkg(line)
        if pkg:
            pkgs.append(pkg)

if not pkgs:
    print("No packages found in requirements.txt, skipping import smoke test.")
    sys.exit(0)

failed = []
for pkg in pkgs:
    try:
        __import__(pkg)
        print(f"✅ {pkg} import works")
    except Exception as e:
        print(f"❌ {pkg} import failed: {e}")
        failed.append(pkg)

if failed:
    print(f"Some imports failed: {failed}")
    sys.exit(1)
EOF
      - name: Run unit tests (verbose)
        shell: bash
        run: |
          cd repo
          if [ -d tests ]; then python -m unittest discover tests/ -v; else echo "No tests/ directory found, skipping unit tests."; fi
